//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/UnityCTVisualizerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace UnityCTVisualizer
{
    public partial class @UnityCTVisualizerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UnityCTVisualizerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UnityCTVisualizerInput"",
    ""maps"": [
        {
            ""name"": ""CameraControls"",
            ""id"": ""9dc6422a-bbbd-42e0-8b26-5da2e6320554"",
            ""actions"": [
                {
                    ""name"": ""HorizontalRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a154b685-ba14-481d-b9a1-244df53a341a"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cf558708-d376-4125-a997-09d10416da1d"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomInOut"",
                    ""type"": ""PassThrough"",
                    ""id"": ""29c8d2a4-9dd5-43cc-b822-cf9e59638612"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlowZoomActivator"",
                    ""type"": ""Button"",
                    ""id"": ""a640b0f1-b8f2-473c-bb22-f9fb527531a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4441bd2e-5b55-4af3-9d5f-dfae440377d5"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomInOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19aa9548-bc8d-4aa1-9b70-64244f74e611"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlowZoomActivator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""b71c49d5-ef84-40cc-b818-5598c775f649"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""1f82fc08-6a78-4d7d-89bb-be6ee7100eab"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""8fc512db-d47e-42e8-b76a-5a5cb2b85016"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ac3caa37-5267-4c7e-8f24-2d003b01c031"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""8073ebb6-b87d-4c98-9339-c14132f13126"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""d90f3ee9-011a-44d1-ab4a-6f4856c7d0ce"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""4ab470fb-9313-4b9d-ae6c-70b6e425ec56"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""2ac65fbe-3c1c-4c40-b8da-eba56a56d8e5"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CameraControls
            m_CameraControls = asset.FindActionMap("CameraControls", throwIfNotFound: true);
            m_CameraControls_HorizontalRotation = m_CameraControls.FindAction("HorizontalRotation", throwIfNotFound: true);
            m_CameraControls_VerticalRotation = m_CameraControls.FindAction("VerticalRotation", throwIfNotFound: true);
            m_CameraControls_ZoomInOut = m_CameraControls.FindAction("ZoomInOut", throwIfNotFound: true);
            m_CameraControls_SlowZoomActivator = m_CameraControls.FindAction("SlowZoomActivator", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CameraControls
        private readonly InputActionMap m_CameraControls;
        private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
        private readonly InputAction m_CameraControls_HorizontalRotation;
        private readonly InputAction m_CameraControls_VerticalRotation;
        private readonly InputAction m_CameraControls_ZoomInOut;
        private readonly InputAction m_CameraControls_SlowZoomActivator;
        public struct CameraControlsActions
        {
            private @UnityCTVisualizerInput m_Wrapper;
            public CameraControlsActions(@UnityCTVisualizerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @HorizontalRotation => m_Wrapper.m_CameraControls_HorizontalRotation;
            public InputAction @VerticalRotation => m_Wrapper.m_CameraControls_VerticalRotation;
            public InputAction @ZoomInOut => m_Wrapper.m_CameraControls_ZoomInOut;
            public InputAction @SlowZoomActivator => m_Wrapper.m_CameraControls_SlowZoomActivator;
            public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICameraControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
                @HorizontalRotation.started += instance.OnHorizontalRotation;
                @HorizontalRotation.performed += instance.OnHorizontalRotation;
                @HorizontalRotation.canceled += instance.OnHorizontalRotation;
                @VerticalRotation.started += instance.OnVerticalRotation;
                @VerticalRotation.performed += instance.OnVerticalRotation;
                @VerticalRotation.canceled += instance.OnVerticalRotation;
                @ZoomInOut.started += instance.OnZoomInOut;
                @ZoomInOut.performed += instance.OnZoomInOut;
                @ZoomInOut.canceled += instance.OnZoomInOut;
                @SlowZoomActivator.started += instance.OnSlowZoomActivator;
                @SlowZoomActivator.performed += instance.OnSlowZoomActivator;
                @SlowZoomActivator.canceled += instance.OnSlowZoomActivator;
            }

            private void UnregisterCallbacks(ICameraControlsActions instance)
            {
                @HorizontalRotation.started -= instance.OnHorizontalRotation;
                @HorizontalRotation.performed -= instance.OnHorizontalRotation;
                @HorizontalRotation.canceled -= instance.OnHorizontalRotation;
                @VerticalRotation.started -= instance.OnVerticalRotation;
                @VerticalRotation.performed -= instance.OnVerticalRotation;
                @VerticalRotation.canceled -= instance.OnVerticalRotation;
                @ZoomInOut.started -= instance.OnZoomInOut;
                @ZoomInOut.performed -= instance.OnZoomInOut;
                @ZoomInOut.canceled -= instance.OnZoomInOut;
                @SlowZoomActivator.started -= instance.OnSlowZoomActivator;
                @SlowZoomActivator.performed -= instance.OnSlowZoomActivator;
                @SlowZoomActivator.canceled -= instance.OnSlowZoomActivator;
            }

            public void RemoveCallbacks(ICameraControlsActions instance)
            {
                if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraControlsActions @CameraControls => new CameraControlsActions(this);
        public interface ICameraControlsActions
        {
            void OnHorizontalRotation(InputAction.CallbackContext context);
            void OnVerticalRotation(InputAction.CallbackContext context);
            void OnZoomInOut(InputAction.CallbackContext context);
            void OnSlowZoomActivator(InputAction.CallbackContext context);
        }
    }
}
